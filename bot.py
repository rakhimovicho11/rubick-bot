import asyncio
import random
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.bot import DefaultBotProperties
from dotenv import load_dotenv
from bracket_visual import generate_bracket_image
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# –î–∞–Ω–Ω—ã–µ
registered_teams = []
registered_players = set()
registered_dota_ids = set()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Registration(StatesGroup):
    waiting_for_team_name = State()
    waiting_for_team_players = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="‚ú® –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="register"),
        InlineKeyboardButton(text="üìù –ö–æ–º–∞–Ω–¥—ã", callback_data="show_commands"),
    ],
    [
        InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
        InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
    ],
])

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def set_commands():
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
        BotCommand(command="help", description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"),
        BotCommand(command="register", description="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É"),
        BotCommand(command="about", description="–£–∑–Ω–∞—Ç—å –æ –±–æ—Ç–µ –∏ —Ç—É—Ä–Ω–∏—Ä–∞—Ö"),
        BotCommand(command="report_result", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞"),
        BotCommand(command="generate_bracket", description="–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (–º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"),
    ]
    await bot.set_my_commands(commands)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üéâ <b>–ü—Ä–∏–≤–µ—Ç, —á–µ–º–ø–∏–æ–Ω!</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–∞–≤–∫—É –†—É–±–∏–∫–∞ üß© ‚Äî –º–µ—Å—Ç–æ, –≥–¥–µ —Ä–æ–∂–¥–∞—é—Ç—Å—è –ª–µ–≥–µ–Ω–¥—ã!\n\n"
        "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –Ω–∞—à–∏ —Ç—É—Ä–Ω–∏—Ä—ã.\n\n"
        "<i>–ì–æ—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å —Å–∫–∏–ª–ª –∏ –≤–∑–æ—Ä–≤–∞—Ç—å —Å—Ü–µ–Ω—É? –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!</i>",
        reply_markup=main_menu
    )

# /register ‚Äî —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏
@dp.message(Command("register"))
async def cmd_register(message: Message, state: FSMContext):
    if len(registered_teams) >= 16:
        await message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ 16 —Å–ª–æ—Ç–æ–≤ –∑–∞–Ω—è—Ç—ã.")
        return
    await message.answer("üöÄ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã:")
    await state.set_state(Registration.waiting_for_team_name)

# /help ‚Äî –∫–∞–∫ –∫–Ω–æ–ø–∫–∞
@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: <b>@laziz_rahimovich</b>\n\n"
        "–¢–∞–∫–∂–µ –Ω–µ –∑–∞–±—É–¥—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: <a href='https://t.me/rubickshop'>@rubickshop</a>",
        disable_web_page_preview=True,
        reply_markup=main_menu
    )

# /about ‚Äî –∫–∞–∫ –∫–Ω–æ–ø–∫–∞
@dp.message(Command("about"))
async def cmd_about(message: Message):
    await message.answer(
        "üß© <b>–û –±–æ—Ç–µ –õ–∞–≤–∫–∏ –†—É–±–∏–∫–∞</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –∏ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n"
        "–ó–¥–µ—Å—å —Å–æ–±–∏—Ä–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ä—è—Ç –∂–µ–ª–∞–Ω–∏–µ–º –ø–æ–±–µ–∂–¥–∞—Ç—å –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!\n\n"
        "üî• –ù–∞—à –∫–∞–Ω–∞–ª: <a href='https://t.me/rubickshop'>@rubickshop</a>\n"
        "üöÄ –ì–æ—Ç–æ–≤—å—Å—è –∫ —ç–ø–∏—á–Ω—ã–º –º–∞—Ç—á–∞–º –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º —ç–º–æ—Ü–∏—è–º!\n\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É: <b>@laziz_rahimovich</b>.",
        disable_web_page_preview=True,
        reply_markup=main_menu
    )

@dp.message(Command("generate_bracket"))
async def manual_generate(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É.")
        return
    if len(registered_teams) < 16:
        await message.answer("‚è≥ –ù—É–∂–Ω–æ 16 –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
        return
    await generate_bracket()
    await message.answer("‚úÖ –°–µ—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞–º!")

async def generate_bracket():
    global tournament_bracket, match_id_counter, current_round
    sorted_teams = sorted(registered_teams, key=lambda x: x['avg_mmr'])
    random.shuffle(sorted_teams)
    tournament_bracket = []
    match_id_counter = 1
    current_round = 1

    for i in range(0, 16, 2):
        tournament_bracket.append((sorted_teams[i], sorted_teams[i + 1], match_id_counter))
        match_id_counter += 1

    # ‚ö†Ô∏è –§–æ—Ä–º–∏—Ä—É–µ–º bracket-–º–∞—Å—Å–∏–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    bracket_data = [
        [(team1['name'], team2['name']) for team1, team2, _ in tournament_bracket]
    ]
    file_path = generate_bracket_image(bracket_data)

    # üì§ –†–∞—Å—Å—ã–ª–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–Ω–∞–º
    for team1, team2, _ in tournament_bracket:
        for captain_id in (team1['captain_id'], team2['captain_id']):
            await bot.send_photo(captain_id, photo=open(file_path, "rb"))

    # üì¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π
    match_list = "\n".join([
        f"–ú–∞—Ç—á #{match_id}: {team1['name']} vs {team2['name']}"
        for team1, team2, match_id in tournament_bracket
    ])
    await bot.send_message(ADMIN_ID, f"üìä <b>–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ ‚Äî –†–∞—É–Ω–¥ 1</b>\n\n{match_list}")


    await notify_round_matches()


async def notify_round_matches():
    for team1, team2, match_id in tournament_bracket:
        text = (
            f"üèÜ <b>–¢—É—Ä–Ω–∏—Ä Rubick Cup ‚Äî –†–∞—É–Ω–¥ {current_round}</b>\n"
            f"\nüéÆ –ú–∞—Ç—á <b>#{match_id}</b>\n"
            f"<b>{team1['name']}</b> vs <b>{team2['name']}</b>\n\n"
            f"üìå –ö–∞–ø–∏—Ç–∞–Ω—ã, –ø–æ—Å–ª–µ –º–∞—Ç—á–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            f"<code>/report_result {match_id} –ò–º—è_–ü–æ–±–µ–¥–∏—Ç–µ–ª—è</code>\n"
        )
        try:
            await bot.send_message(team1['captain_id'], text)
            await bot.send_message(team2['captain_id'], text)
        except Exception as e:
            await bot.send_message(ADMIN_ID, f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤: {e}")

@dp.message(Command("report_result"))
async def report_result_handler(message: Message):
    global tournament_bracket

    if "tournament_bracket" not in globals():
        await message.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª—Å—è. –°–Ω–∞—á–∞–ª–∞ –∞–¥–º–∏–Ω –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ç–∫—É –∫–æ–º–∞–Ω–¥–æ–π /generate_bracket.")
        return

    args = message.text.split()[1:]
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /report_result MATCH_ID –ò–ú–Ø_–ü–û–ë–ï–î–ò–¢–ï–õ–Ø")
        return

    try:
        match_id = int(args[0])
    except ValueError:
        await message.answer("‚ùå MATCH_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    winner_name = " ".join(args[1:]).strip().lower()

    match = next((m for m in tournament_bracket if m[2] == match_id), None)
    if not match:
        await message.answer(f"‚ùå –ú–∞—Ç—á #{match_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    team1, team2, _ = match
    if winner_name not in (team1["name"].lower(), team2["name"].lower()):
        await message.answer("‚ùå –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ –≤ —ç—Ç–æ–º –º–∞—Ç—á–µ.")
        return

    if match_id in match_results:
        await message.answer("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        return

    if message.from_user.id not in (team1["captain_id"], team2["captain_id"]):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω —É—á–∞—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        return

    match_results[match_id] = winner_name
    loser = team2 if winner_name == team1["name"].lower() else team1

    await message.answer(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–Ω—è—Ç! –ü–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ <b>{winner_name.title()}</b>.")
    await bot.send_message(
        ADMIN_ID,
        f"‚öîÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ #{match_id}:\n"
        f"‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>{winner_name.title()}</b>\n"
        f"‚ùå –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: <b>{loser['name']}</b>"
    )




# –ö–Ω–æ–ø–∫–∏ (callback)
@dp.callback_query(lambda c: c.data == "register")
async def register_callback(callback_query, state: FSMContext):
    if len(registered_teams) >= 16:
        await callback_query.message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ 16 —Å–ª–æ—Ç–æ–≤ –∑–∞–Ω—è—Ç—ã.")
        await callback_query.answer()
        return
    await callback_query.message.answer("üöÄ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã:")
    await state.set_state(Registration.waiting_for_team_name)
    await callback_query.answer()

from aiogram.types import CallbackQuery

@dp.callback_query(lambda c: c.data == "help")
async def callback_help(callback_query: CallbackQuery):
    await callback_query.message.answer(
        "‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: <b>@laziz_rahimovich</b>\n\n"
        "–¢–∞–∫–∂–µ –Ω–µ –∑–∞–±—É–¥—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: <a href='https://t.me/rubickshop'>@rubickshop</a>",
        disable_web_page_preview=True,
        reply_markup=main_menu
    )
    await callback_query.answer()


@dp.callback_query(lambda c: c.data == "about")
async def callback_about(callback_query: CallbackQuery):
    await callback_query.message.answer(
        "üß© <b>–û –±–æ—Ç–µ –õ–∞–≤–∫–∏ –†—É–±–∏–∫–∞</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –∏ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.\n"
        "–ó–¥–µ—Å—å —Å–æ–±–∏—Ä–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ä—è—Ç –∂–µ–ª–∞–Ω–∏–µ–º –ø–æ–±–µ–∂–¥–∞—Ç—å –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!\n\n"
        "üî• –ù–∞—à –∫–∞–Ω–∞–ª: <a href='https://t.me/rubickshop'>@rubickshop</a>\n"
        "üöÄ –ì–æ—Ç–æ–≤—å—Å—è –∫ —ç–ø–∏—á–Ω—ã–º –º–∞—Ç—á–∞–º –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º —ç–º–æ—Ü–∏—è–º!\n\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É: <b>@laziz_rahimovich</b>.",
        disable_web_page_preview=True,
        reply_markup=main_menu
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "show_commands")
async def show_commands_callback(callback_query: CallbackQuery):
    await callback_query.message.answer(
        "üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n"
        "/start ‚Äì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/register ‚Äì –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã\n"
        "/report_result ‚Äì –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞\n"
        "/help ‚Äì –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é\n"
        "/about ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ",
        reply_markup=main_menu
    )
    await callback_query.answer()



@dp.message(Registration.waiting_for_team_name)
async def process_team_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    if any(team["name"].lower() == name.lower() for team in registered_teams):
        await message.answer("‚ùå –¢–∞–∫–æ–µ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.")
        return
    await state.update_data(team_name=name)
    await message.answer("‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤ (5 —Å—Ç—Ä–æ–∫):\n@user DotaID MMR")
    await state.set_state(Registration.waiting_for_team_players)

@dp.message(Registration.waiting_for_team_players)
async def process_players(message: Message, state: FSMContext):
    lines = message.text.strip().splitlines()
    if len(lines) != 5:
        await message.answer("‚ùå –ù—É–∂–Ω–æ —Ä–æ–≤–Ω–æ 5 –∏–≥—Ä–æ–∫–æ–≤.")
        return

    team_data = []
    usernames_in_team = set()
    dota_ids_in_team = set()

    for i, line in enumerate(lines, 1):
        parts = line.split()
        if len(parts) != 3:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i}. –§–æ—Ä–º–∞—Ç: @user DotaID MMR")
            return
        username, dota_id, mmr = parts
        if not dota_id.isdigit() or not mmr.isdigit():
            await message.answer(f"‚ùå DotaID –∏ MMR –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏. –°—Ç—Ä–æ–∫–∞ {i}")
            return
        if username in registered_players or dota_id in registered_dota_ids:
            await message.answer(f"‚ùå –ò–≥—Ä–æ–∫ {username} –∏–ª–∏ DotaID {dota_id} —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç.")
            return
        if username in usernames_in_team or dota_id in dota_ids_in_team:
            await message.answer(f"‚ùå –î—É–±–ª–∏–∫–∞—Ç –≤ –∫–æ–º–∞–Ω–¥–µ: {username} / {dota_id}")
            return
        usernames_in_team.add(username)
        dota_ids_in_team.add(dota_id)
        team_data.append((username, dota_id, int(mmr)))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await is_user_subscribed(message.from_user.id):
        await message.answer(f"‚ùå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME} –¥–ª—è —É—á–∞—Å—Ç–∏—è.")
        return

    data = await state.get_data()
    team_name = data["team_name"]

    registered_teams.append({
        "name": team_name,
        "players": team_data,
        "avg_mmr": sum(p[2] for p in team_data) // 5,
        "captain_id": message.from_user.id
    })

    for username, dota_id, _ in team_data:
        registered_players.add(username)
        registered_dota_ids.add(dota_id)

    await message.answer(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ <b>{team_name}</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!", reply_markup=main_menu)
    await bot.send_message(ADMIN_ID, f"üî• –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: <b>{team_name}</b>\n" + "\n".join(f"{u} | {d}" for u, d, _ in team_data))
    await state.clear()

async def is_user_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ("member", "administrator", "creator")
    except Exception:
        return False

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    await set_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

import asyncio
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}{WEBHOOK_PATH}"

async def on_startup(bot: Bot) -> None:
    await set_commands()
    await bot.set_webhook(WEBHOOK_URL)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(bot: Bot) -> None:
    await bot.delete_webhook()

async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    return app

if __name__ == "__main__":
    import os
    port = int(os.environ.get("PORT", 10000))  # Render –ø–µ—Ä–µ–¥–∞—ë—Ç PORT —Å—é–¥–∞
    web.run_app(main(), host="0.0.0.0", port=port)


